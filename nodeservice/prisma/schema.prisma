// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  Parent
  Children
  Tutor
  Admin
}

enum UserStatus {
  Active
  Suspended
  Banned
}

model User {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now()) @updatedAt
  deleted_at DateTime?

  username String @unique @db.VarChar(50)
  password String @db.VarChar(255)
  email    String @unique @db.VarChar(255)

  role      UserRole @default(Parent)
  phone     String?  @db.VarChar(20)
  full_name String?  @db.VarChar(255)
  picture   String?

  is_verified Boolean    @default(false)
  status      UserStatus @default(Active)

  last_login_at       BigInt?
  account_locked      Boolean @default(false)
  password_changed_at BigInt?

  Tutor  Tutor[]
  Parent Parent[]

  @@index([status])
  @@index([role])
  @@index([deleted_at])
}

model Tutor {
  id             Int     @id
  bio            String?
  qualifications String?
  teaching_style String?
  is_available   Boolean @default(false)
  demo_video_url String?
  image          String?

  profile User @relation(fields: [id], references: [id])

  tutorSpecialty TutorSpecialty[]
  courses        Course[]
  tutorReviews   TutorReview[]
  availability   Availability?
}

model Parent {
  id                    Int     @id
  preferred_language    String
  notifications_enabled Boolean @default(false)

  profile User @relation(fields: [id], references: [id])

  childrens     Children[]
  tutorReviews  TutorReview[]
  courseReviews CourseReview[]
}

model Children {
  id             Int    @id @default(autoincrement())
  age            Int
  grade_level    String
  learning_goals String
  full_name      String
  password       String

  parent_id Int
  parent    Parent @relation(fields: [parent_id], references: [id])

  courseSubscriptions CourseSubscription[]
}

model TutorSpecialty {
  id               Int    @id @default(autoincrement())
  subject          String
  level            String
  certification    String
  years_experience Int

  tutor_id Int
  Tutor    Tutor @relation(fields: [tutor_id], references: [id], onDelete: Cascade)
}

model Course {
  id            Int          @id @default(autoincrement())
  title         String
  description   String?
  price         Float
  total_lessons Int
  grade         Int
  subject       String
  status        CourseStatus @default(Draft)
  image         String?

  tutor    Tutor @relation(fields: [tutor_id], references: [id])
  tutor_id Int

  lessons             Lesson[]
  courseSubscriptions CourseSubscription[]
  courseReviews       CourseReview[]
}

model Lesson {
  id                  Int     @id @default(autoincrement())
  title               String
  description         String?
  learning_objectives String?
  materials_needed    String?

  course_id Int
  Course    Course @relation(fields: [course_id], references: [id], onDelete: Cascade)
}

model Availability {
  id       Int   @id @default(autoincrement())
  tutor_id Int   @unique
  tutor    Tutor @relation(fields: [tutor_id], references: [id])

  days DayAvailability[]

  timeGap Int // Minimum gap between bookings in minutes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DayAvailability {
  id              Int      @id @default(autoincrement())
  availability_id Int
  day             Day
  startTime       DateTime
  endTime         DateTime

  availability Availability @relation(fields: [availability_id], references: [id], onDelete: Cascade)
}

model CourseSubscription {
  id                 Int    @id @default(autoincrement())
  status             String
  sessions_remaining Int?

  course_id Int
  course    Course @relation(fields: [course_id], references: [id])

  children_id Int
  children    Children @relation(fields: [children_id], references: [id])

  courseSubscriptionSchedules CourseSubscriptionSchedule[]
  teachingSessions            TeachingSession[]
}

model TeachingSession {
  id                Int      @id @default(autoincrement())
  google_meet_id    String?
  startTime         DateTime
  endTime           DateTime
  status            String
  topics_covered    String?
  homework_assigned String?

  subscription_id Int
  subscription    CourseSubscription @relation(fields: [subscription_id], references: [id])
  sessionFeedback SessionFeedback[]
}

model SessionFeedback {
  id               Int     @id @default(autoincrement())
  rating           Int
  comment          String?
  teaching_quality String?

  session_id Int
  session    TeachingSession @relation(fields: [session_id], references: [id])
}

model CourseSubscriptionSchedule {
  id              Int                @id @default(autoincrement())
  subscription_id Int
  subscription    CourseSubscription @relation(fields: [subscription_id], references: [id])

  startTime DateTime
  endTime   DateTime
}

model TutorReview {
  id             Int      @id @default(autoincrement())
  rating         Int
  review_content String?
  createAt       DateTime @default(now())

  tutor_id  Int
  tutor     Tutor  @relation(fields: [tutor_id], references: [id])
  parent_id Int
  parent    Parent @relation(fields: [parent_id], references: [id])
}

model CourseReview {
  id             Int      @id @default(autoincrement())
  rating         Int
  review_content String?
  createAt       DateTime @default(now())

  course_id Int
  course    Course @relation(fields: [course_id], references: [id])
  parent_id Int
  parent    Parent @relation(fields: [parent_id], references: [id])
}

enum CourseStatus {
  Draft
  Published
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}
